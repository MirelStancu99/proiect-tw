[{"C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\index.js":"1","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\App.js":"2","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\components\\Login.js":"3","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\components\\Navbar.js":"4","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\pages\\ProfessorPage.js":"5","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\pages\\StudentPage.js":"6","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\components\\Feedback.js":"7","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\components\\Activity.js":"8"},{"size":199,"mtime":1673810488117,"results":"9","hashOfConfig":"10"},{"size":4295,"mtime":1673136449000,"results":"11","hashOfConfig":"10"},{"size":4460,"mtime":1673136449000,"results":"12","hashOfConfig":"10"},{"size":640,"mtime":1673136449000,"results":"13","hashOfConfig":"10"},{"size":11365,"mtime":1673136449000,"results":"14","hashOfConfig":"10"},{"size":10124,"mtime":1673136449000,"results":"15","hashOfConfig":"10"},{"size":396,"mtime":1673136449000,"results":"16","hashOfConfig":"10"},{"size":410,"mtime":1673136449000,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hx2vf7",{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\index.js",[],"C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\App.js",["41"],"import Login from './components/Login';\nimport { useState, useEffect } from 'react';\nimport Navbar from './components/Navbar';\nimport ProfessorPage from './pages/ProfessorPage';\nimport StudentPage from './pages/StudentPage';\nimport jwt_decode from 'jwt-decode';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [isProfessor, setIsProfessor] = useState(false);\n\n  useEffect(() => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      try {\n        const data = jwt_decode(token);\n        setIsLoggedIn(true);\n        setIsProfessor(data.userType == 2);\n      } catch (e) {\n        localStorage.removeItem('token');\n      }\n    }\n  }, []);\n\n  const onSignIn = (enteredEmail, enteredPassword, fname, lname) => {\n    console.log(enteredEmail)\n    let usertype = 0;\n    if (enteredEmail.match(/^[A-Za-z0-9._%+-]+@stud.ase.ro$/g)) usertype = 1;\n    if (enteredEmail.match(/^[A-Za-z0-9._%+-]+@ie.ase.ro$/g)) usertype = 2;\n    if (enteredEmail.match(/^[A-Za-z0-9._%+-]+@csie.ase.ro$/g)) usertype = 2;\n    if (enteredEmail.match(/^[A-Za-z0-9._%+-]+@ase.ro$/g)) usertype = 2;\n    fetch('http://localhost:3001/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        userName: enteredEmail,\n        password: enteredPassword,\n        firstName: fname,\n        lastName: lname,\n        usertypeId: usertype,\n      }),\n    })\n      .then((response) => {\n        if (response.ok) {\n          toast.success('Utilizator inregistrat', {\n            position: \"top-right\",\n            autoClose: 1500,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n        } else {\n          throw new Error();\n        }\n      })\n      .catch((e) => toast.error(\"Date incorecte\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      }));\n  };\n  const onLogin = (enteredEmail, enteredPassword) => {\n    fetch('http://localhost:3001/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        userName: enteredEmail,\n        password: enteredPassword,\n      }),\n    })\n      .then((response) => {\n        if (response.ok) {\n          toast.success('Succes', {\n            position: \"top-right\",\n            autoClose: 1500,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          });\n          return response.json();\n        } else {\n          throw new Error('Email sau parola gresite!');\n        }\n      })\n      .then((data) => {\n        if (data.message) {\n          if (enteredEmail.split('@')[1] === 'stud.ase.ro') {\n            setIsProfessor(false);\n          } else setIsProfessor(true);\n          localStorage.setItem('token', data.token);\n          setIsLoggedIn(true);\n        }\n      })\n      .catch((e) => toast.error(\"Email / parola gresita!\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      }))\n  };\n  const onLogout = () => {\n    localStorage.removeItem('token');\n    setIsLoggedIn(false);\n    setIsProfessor(false);\n    toast.success('Delogare cu succes!', {\n      position: \"top-right\",\n      autoClose: 1500,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n  };\n  return (\n    <div className='main'> <ToastContainer />\n      {isLoggedIn ? <Navbar onLogout={onLogout} isLoggedIn={isLoggedIn} /> : ''}\n      {isLoggedIn === false ? <Login onLogin={onLogin} onSignIn={onSignIn} /> : ''}{' '}\n      {isLoggedIn && isProfessor ? <ProfessorPage /> : ''}\n      {isLoggedIn && !isProfessor ? <StudentPage /> : ''}\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\components\\Login.js",["42","43"],"import { useRef } from 'react';\n\nfunction Login(props) {\n  const emailRef = useRef();\n  const emailRefSign = useRef();\n  const passwordRefSign = useRef();\n  const passwordRef = useRef();\n  const fnameRef = useRef();\n  const lnameRef = useRef();\n\n  const LoginHandler = (e) => {\n    if (e) {\n      e.preventDefault();\n      console.log(emailRef.current.value, passwordRef.current.value)\n      props.onLogin(emailRef.current.value, passwordRef.current.value);\n    }\n\n  };\n  const SignHandler = (e) => {\n    if (e) {\n      e.preventDefault();\n      console.log(emailRefSign.current.value, passwordRefSign.current.value)\n      props.onSignIn(emailRefSign.current.value,\n        passwordRefSign.current.value,\n        fnameRef.current.value,\n        lnameRef.current.value);\n      changeLogIn(e);\n    }\n  };\n\n  const changeLogIn = (e) => {\n    if (!e) return;\n    e.preventDefault();\n    document.querySelector('.cont_forms').className =\n      'cont_forms cont_forms_active_login';\n    document.querySelector('.cont_form_login').style.display = 'block';\n    document.querySelector('.cont_form_sign_up').style.opacity = '0';\n\n    setTimeout(function () {\n      document.querySelector('.cont_form_login').style.opacity = '1';\n    }, 400);\n\n    setTimeout(function () {\n      document.querySelector('.cont_form_sign_up').style.display = 'none';\n    }, 200);\n  };\n\n  const changeSignUp = (e) => {\n    if (!e) return;\n    e.preventDefault();\n    document.querySelector('.cont_forms').className =\n      'cont_forms cont_forms_active_sign_up';\n    document.querySelector('.cont_form_sign_up').style.display = 'block';\n    document.querySelector('.cont_form_login').style.opacity = '0';\n\n    setTimeout(function () {\n      document.querySelector('.cont_form_sign_up').style.opacity = '1';\n    }, 100);\n\n    setTimeout(function () {\n      document.querySelector('.cont_form_login').style.display = 'none';\n    }, 400);\n  }\n\n  return (\n    <div class=\"cotn_principal\">\n      <div class=\"cont_centrar\">\n        <div class=\"cont_login\">\n          <div class=\"cont_info_log_sign_up\">\n            <div class=\"col_md_login\">\n              <div class=\"cont_ba_opcitiy\">\n                <h2>LOGIN</h2>\n                <p>Daca ai deja un cont...</p>\n                <button class=\"btn_login\" onClick={changeLogIn}>\n                  LOGIN\n                </button>\n              </div>\n            </div>\n            <div class=\"col_md_sign_up\">\n              <div class=\"cont_ba_opcitiy\">\n                <h2>SIGN UP</h2>\n\n                <p>Nu ai cont?</p>\n\n                <button class=\"btn_sign_up\" onClick={changeSignUp}>\n                  SIGN UP\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div class=\"cont_back_info\">\n            <div class=\"cont_img_back_grey\">\n              <img\n                src=\"https://foodtank.com/wp-content/uploads/2021/07/alfons-morales-YLSwjSy7stw-unsplash.jpg\"\n                alt=\"\"\n              />\n            </div>\n          </div>\n          <div class=\"cont_forms\">\n            <div class=\"cont_img_back_\">\n              <img\n                src=\"https://foodtank.com/wp-content/uploads/2021/07/alfons-morales-YLSwjSy7stw-unsplash.jpg\"\n                alt=\"\"\n              />\n            </div>\n            <div class=\"cont_form_login\">\n              <a href=\"#\" onClick={LoginHandler}>\n                <i class=\"material-icons\">&#xE5C4;</i>\n              </a>\n              <h2>LOGIN</h2>\n              <input type=\"text\" ref={emailRef} placeholder=\"Email\" />\n              <input type=\"password\" ref={passwordRef} placeholder=\"Password\" />\n              <button class=\"btn_login\" onClick={LoginHandler}>\n                LOGIN\n              </button>\n            </div>\n\n            <div class=\"cont_form_sign_up\">\n              <a href=\"#\" onClick={SignHandler}>\n                <i class=\"material-icons\">&#xE5C4;</i>\n              </a>\n              <h2>SIGN UP</h2>\n              <input type=\"text\" ref={emailRefSign} placeholder=\"Email\" />\n              <input type=\"text\" ref={lnameRef} placeholder=\"Nume\" />\n              <input type=\"text\" ref={fnameRef} placeholder=\"Prenume\" />\n              <input type=\"password\" ref={passwordRefSign} placeholder=\"Parola\" />\n              <button class=\"btn_sign_up\" onClick={SignHandler}>\n                SIGN UP\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\nexport default Login;","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\components\\Navbar.js",["44","45","46"],"import logo from \"../media/logo-2.svg\"\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar navbar-dark bg-dark justify-content-between sticky-top\" id=\"navbar\">\n      <div className=\"nav-left\">\n        <img src={logo} id=\"logo\"></img>\n        <a className=\"title-app\">Continous Feedback App</a>\n        <a onClick={() => (window.location.href = '/')} className=\"nav-item\">Home</a>\n        {props.isLoggedIn && (\n          <a\n            id='btnLogOut'\n            onClick={props.onLogout}\n            href='/#'\n          >\n            Logout\n          </a>\n        )}{' '}\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\pages\\ProfessorPage.js",["47","48","49","50","51","52","53","54","55","56","57","58"],"import { useState, useEffect, useRef } from 'react';\nimport Activity from '../components/Activity';\nimport { toast } from 'react-toastify';\nimport moment from 'moment';\n\nfunction ProfessorPage() {\n  const [createActivity, setCreateActivity] = useState(false);\n  const [createdActivity, setCreatedActivity] = useState(false);\n  const [showHome, setShowHome] = useState(false);\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [professor, setProfessor] = useState();\n  const [activities, setActivities] = useState([]);\n  const [feedbacks, setFeedbacks] = useState([]);\n  const [arrayTypes, setArrayTypes] = useState([]);\n  const cod = useRef();\n  const codPtFeedback = useRef();\n  const descriere = useRef();\n  const date = useRef();\n  const current = new Date();\n  const currentDate = `${current.getDate()}:${current.getMonth() + 1}:${current.getFullYear()}`;\n\n  const getBackendData = () => {\n    fetch('http://localhost:3001/logged', {\n      method: 'GET',\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setProfessor(data.dataValues)\n      });\n  };\n  const getAllExistentActivities = (prof) => {\n    let introdusa = moment(date.current.value, moment.ISO_8601, true);\n    let curenta = moment(currentDate, \"DD:M:YYYY HH:mm:ss\", true);\n    let dif = introdusa - curenta;\n    if (dif < 0) {\n      toast.error(\"Data nu poate fi in trecut!\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n      return;\n    }\n    if (!cod.current.value || !descriere.current.value || !date.current.value) {\n      toast.error(\"Completati campurile!\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n      return;\n    } else if (date.current.value < currentDate) {\n      toast.error(\"Data invalida!\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n      return;\n    }\n    fetch(`http://localhost:3001/activities`, {\n      method: 'GET',\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'application/json',\n      },\n    }).then((res) => res.json())\n      .then((data) => {\n        console.log(data)\n        for (let a of data) {\n          if (a.code == cod.current.value) {\n            toast.error(\"Exista activitate cu acest cod!\", {\n              position: \"top-right\",\n              autoClose: 2000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            })\n            return;\n          }\n        }\n        console.log('ok')\n        makeRequest(prof)\n      })\n      .catch((e) => { \n        makeRequest(prof) });\n  };\n  const makeRequest = (prof) => {\n    fetch(`http://localhost:3001/activities/${prof.id}`, {\n      method: 'POST',\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        date: date.current.value,\n        description: descriere.current.value,\n        code: cod.current.value,\n      }),\n    }).then((res) => {\n      if (res.status == 400) {\n        toast.error(\"Nu s-a creat activitatea!\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        }); return;\n      } getAllActivities(professor);\n      toast.success(\"S-a creat activitatea!\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      })\n      showActivity();\n    })\n      .catch((e) => toast.error(\"Nu s-a creat activitatea!\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      }));\n  };\n  const getAllActivities = (prof) => {\n    fetch(`http://localhost:3001/activities/users/${prof.id}`, {\n      method: 'GET',\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'application/json',\n      },\n    }).then((res) => res.json())\n      .then((data) => {\n        setActivities(data)\n        console.log(data[0])\n      }).catch((e) => toast.error(\"Nu s-au putut prelua activitatile!\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      }));\n  };\n\n  const getFeedbackOfActivity = (activity) => {\n    let id;\n    if (!activity) {\n      activities.map(a => {\n        console.log(codPtFeedback.current.value)\n        if (a.code == codPtFeedback.current.value) {\n          id = a.id;\n        }\n      })\n    } else id = activity.id;\n    console.log(id)\n    fetch(`http://localhost:3001/feedbacks/activity/${id}`, {\n      method: 'GET',\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'application/json',\n      },\n    }).then((res) => res.json())\n      .then((data) => {\n        setFeedbacks(data)\n        let e = 0, g = 0, a = 0, p = 0;\n        for (let f of data) {\n          if (f.type == 'EXCELENT') {\n            e++;\n          } else if (f.type == 'GOOD') {\n            g++;\n          } else if (f.type == 'AVERAGE') {\n            a++;\n          } else if (f.type == 'POOR') {\n            p++\n          }\n        }\n        let array = [e, g, a, p];\n        setArrayTypes(array);\n      }).catch(() => {\n        let array = [0, 0, 0, 0];\n        setArrayTypes(array); toast.warn(\"Nu sunt feedback-uri!\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        })\n      });\n  };\n\n  useEffect(getBackendData, []);\n\n\n  function showForm() {\n    setCreatedActivity(false)\n    setCreateActivity(true)\n    setShowHome(false)\n    setShowFeedback(false)\n  }\n  function showActivity() {\n    setCreatedActivity(true)\n    setCreateActivity(false)\n    setShowFeedback(false)\n    setShowHome(false)\n  }\n  function showFeedbackPage() {\n    setCreatedActivity(false)\n    setCreateActivity(false)\n    setShowHome(false)\n    setShowFeedback(true)\n  }\n\n  const showAddActivityPage = (\n    <div id=\"container\">\n      <h1>Creare activitate</h1><br />\n      <label htmlFor=\"cod\"><b>Cod Activitate</b></label><br />\n      <input type=\"descriere\" placeholder=\"Introduceti cod\" ref={cod} name=\"cod\" id=\"cod\" required></input><br />\n\n      <label htmlFor=\"descriere\"><b>Descriere Activitate</b></label><br />\n      <input type=\"descriere\" placeholder=\"Introduceti descriere\" ref={descriere} name=\"descriere\" id=\"descriere\" required></input><br />\n\n      <label htmlFor=\"date\"><b>Data activitate</b></label><br />\n      <input type=\"datetime-local\" placeholder=\"Data activitate\" ref={date} name=\"data\" id=\"data\" required></input><br />\n\n      <button type=\"submit\" className=\"custombtn\" onClick={() => {\n        getAllExistentActivities(professor)\n      }}\n      >Creare activitate</button><br />\n    </div>\n  )\n  const profPage = (\n    <div id=\"container\">\n      <h1>Buna ziua, {professor && professor.firstName + ' ' + professor.lastName}!</h1>\n      <br />\n      <br />\n      <h3>Doriti să creați o activitate noua?</h3>\n      <button type=\"button\" className=\"custombtn\" onClick={showForm} >Creare activitate</button>\n      <h3>Doriti vedeți activitățile dvs</h3>\n      <button type=\"button\" onClick={() => {\n        getAllActivities(professor);\n        showActivity();\n      }} className=\"custombtn\">Vizualizare activități</button>\n      <h3>Doriti să revedeți feedback-ul unei activități</h3>\n      <button type=\"button\" onClick={() => {\n        getAllActivities(professor);\n        showFeedbackPage();\n      }} className=\"custombtn\">Vizualizare feedback</button>\n    </div>)\n\n\n  const addedActivity = (\n    <div className=\"page-content\">\n      <div className=\"professors-display row col-xs-12\">\n        <div className=\"title\">\n          <h1>Activitatile create</h1></div>\n        <div className=\"professor-list row\">\n          <div className=\"professor-cards row\" >\n            {activities.map((activity, i) => (\n              <Activity key={i}\n                activity={activity}\n              />\n            ))}\n            <div width='100%' onClick={showForm} className='circleplus'>\n              <svg width=\"123\" height=\"122\" viewBox=\"0 0 63 122\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <ellipse cx=\"31.5\" cy=\"31\" rx=\"31.5\" ry=\"31\" fill=\"white\">  </ellipse>\n                <path id='totranslate' d=\"M20.6875 12.5312H31.9688V20.6875H20.6875V33.4375H12.0938V20.6875H0.78125V12.5312H12.0938V0.3125H20.6875V12.5312Z\" fill=\"black\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n\n  const feedBackPage = (\n    <div id=\"container\">\n      <h1>Vizualizare feedback</h1>\n      <hr />\n      <br />\n      <label id=\"label\" htmlFor=\"idactivitate\">COD Activitate:</label><br />\n      <input type=\"text\" ref={codPtFeedback} placeholder='cod' id=\"idactivitate\" name=\"idactivitate\"></input><br />\n      <button type=\"button\" className=\"custombtn\" onClick={() => getFeedbackOfActivity(null)} >Afisare</button>\n      <br /><br />\n      <h1>Istoric de feedback</h1>\n      <table class='tablefeedback'>\n        <thead>\n          <tr>\n            <th>Data</th>\n            <th>💓</th>\n            <th>😀</th>\n            <th>🙁</th>\n            <th>😣</th>\n          </tr>\n        </thead>\n        <tbody>\n          {feedbacks.map((feedback, i) => (\n            <tr>\n              <td>{new Date(feedback.date).getHours()}:{new Date(feedback.date).getMinutes()}:{new Date(feedback.date).getSeconds()}</td>\n              <td>{feedback.type == 'EXCELENT' ? 'x' : '0'}</td>\n              <td>{feedback.type == 'GOOD' ? 'x' : '0'}</td>\n              <td>{feedback.type == 'AVERAGE' ? 'x' : '0'}</td>\n              <td>{feedback.type == 'POOR' ? 'x' : '0'}</td>\n            </tr>\n          ))}\n        </tbody>\n        <tfoot>\n          <tr>\n            <td>Total</td>\n            <td >{arrayTypes[0]}</td>\n            <td>{arrayTypes[1]}</td>\n            <td>{arrayTypes[2]}</td>\n            <td>{arrayTypes[3]}</td>\n          </tr>\n        </tfoot>\n\n      </table>\n    </div>\n  );\n\n  return (\n    <div id='1' >\n      {createActivity ? showAddActivityPage :\n        showHome ? profPage :\n          showFeedback ? feedBackPage :\n            createdActivity ? addedActivity : profPage\n      }\n    </div>\n  )\n}\n\nexport default ProfessorPage;\n","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\pages\\StudentPage.js",["59","60","61","62","63"],"import { useState, useEffect, useRef } from 'react';\nimport Feedback from '../components/Feedback';\nimport { toast } from 'react-toastify';\nimport moment from 'moment';\n\nfunction StudentPage() {\n  const [createFeedback, setCreateFeedback] = useState(false);\n  const [createdFeedback, setCreatedFeedback] = useState(false);\n  const [feedbacks, setFeedbacks] = useState([]);\n  const [activity, setActivity] = useState();\n  const [showHome, setShowHome] = useState(false);\n  const [student, setStudent] = useState();\n\n  const cod = useRef();\n  const descriere = useRef();\n  const tip = useRef();\n  const current = new Date();\n  const date = `${current.getDate()}:${current.getMonth() + 1}:${current.getFullYear()} ${current.getHours()}:${current.getMinutes()}:${current.getSeconds()}`;\n  const getActivities = (student) => {\n    fetch(`http://localhost:3001/activities`, {\n      method: 'GET',\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        let activity2 = null;\n        data.map(a => {\n          if (a.code == cod.current.value) {\n            setActivity(a)\n            activity2 = a;\n            let introdusa = moment(activity2.date, moment.ISO_8601,true);\n            let curenta = moment(date, \"DD:M:YYYY HH:mm:ss\",true);\n            let dif = introdusa - curenta;\n           console.log(`data activitatii ${activity2.date}, curenta ${date} si dif ${dif}`)\n           console.log(`data activitatii ${introdusa}, curenta ${curenta} si dif ${dif}`)\n           if(dif<(-432000000)) {\n            toast.error(\"Activitate s-a terminat!\", {\n              position: \"top-right\",\n              autoClose: 2000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            })\n            console.log('a trecut')\n            setActivity(null)\n            return;\n           }\n           else if(dif>432000000) {\n            console.log('n-a inceput')\n            toast.error(\"Activitate nu a inceput!\", {\n              position: \"top-right\",\n              autoClose: 2000,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            })\n            setActivity(null)\n            return;\n           }\n           console.log('ok')\n            /**data activitatii 2022-01-18T12:41:00.000Z, curenta 18:1:2022 15:29:28 si dif NaN */\n            fetch(`http://localhost:3001/users/${student.id}/activities/${activity2.id}/enroll`, {\n              method: 'POST',\n              headers: {\n                Authorization: localStorage.getItem('token'),\n                'Content-Type': 'application/json',\n              },\n            }).then(() => toast.success('Inrolare cu succes!', {\n              position: \"top-right\",\n              autoClose: 1500,\n              hideProgressBar: false,\n              closeOnClick: true,\n              pauseOnHover: true,\n              draggable: true,\n              progress: undefined,\n            }));\n          }\n        }); if (activity2 == null)\n          toast.error(\"Activitate inexistenta!\", {\n            position: \"top-right\",\n            autoClose: 2000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined,\n          })\n      }).catch((e) => toast.error(\"Date incorecte\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      }));;\n  };\n  const getBackendData = () => {\n    fetch('http://localhost:3001/logged', {\n      method: 'GET',\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => res.json())\n      .then((data) => {\n        setStudent(data.dataValues);\n        console.log(data.dataValues);\n      }).catch((e) => toast.error(\"Date incorecte\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      }));;\n  };\n\n  const addedFeedback = (\n    <div className=\"page-content\">\n      <div className=\"professors-display row col-xs-12\">\n        <div className=\"title\">\n          <h1>Feedbackul a fost transmis!</h1></div>\n        <div className=\"professor-list row\">\n          <img src={'https://media.istockphoto.com/photos/gray-abstract-minimal-motion-backgrounds-loopable-elements-4k-picture-id1174989482?b=1&k=20&m=1174989482&s=170667a&w=0&h=ld7ukW9KTzUlJLc6c37C2xs5ESYP2wLyjxsEVCumn2s='} className=\"prof-background\"></img>\n          <div className=\"professor-cards row\" >\n            {feedbacks.map((feedback, i) => (\n              <Feedback key={i}\n                feedback={feedback}\n                i={i + 1}\n              />\n            ))}\n            <div width='100%' onClick={showForm} className='circleplus'>\n              <svg width=\"123\" height=\"122\" viewBox=\"0 0 63 122\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <ellipse cx=\"31.5\" cy=\"31\" rx=\"31.5\" ry=\"31\" fill=\"white\">  </ellipse>\n                <path id='totranslate' d=\"M20.6875 12.5312H31.9688V20.6875H20.6875V33.4375H12.0938V20.6875H0.78125V12.5312H12.0938V0.3125H20.6875V12.5312Z\" fill=\"black\" />\n              </svg>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n  const postFeedback = (stud, activity) => {\n    if (activity == null) {\n      toast.error(\"Introdu activitate valida!\", {\n        position: \"top-right\",\n        autoClose: 2000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n      return;\n    }\n    console.log(date)\n    if (!date || !tip.current.value || !descriere.current.value || !cod.current.value) {\n      toast.error('Completeaza datele!', {\n        position: \"top-right\",\n        autoClose: 1500,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n      return;\n    }\n    fetch(`http://localhost:3001/feedbacks/users/${stud.id}/activities/${activity.id}`, {\n      method: 'POST',\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        date: new Date(current.getFullYear(),current.getMonth(),current.getDate(),current.getHours(),current.getMinutes(),current.getSeconds())        ,\n        description: descriere.current.value,\n        type: tip.current.value,\n      }),\n    }).then(() => {\n      toast.success('Feedback transmis!', {\n        position: \"top-right\",\n        autoClose: 1500,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n      fetch(`http://localhost:3001/feedbacks`, {\n        method: 'GET',\n        headers: {\n          Authorization: localStorage.getItem('token'),\n          'Content-Type': 'application/json',\n        },\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          setFeedbacks(data)\n          console.log(data)\n          showFeedback();\n        }).catch((e) => toast.error(\"Date incorecte\", {\n          position: \"top-right\",\n          autoClose: 2000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined,\n        }));\n    }).catch((e) => toast.error(\"Introdu activitate valida!\", {\n      position: \"top-right\",\n      autoClose: 2000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    }));\n  };\n\n  useEffect(() => {\n    getBackendData();\n  }, []);\n  function showFeedback() {\n    setCreatedFeedback(true)\n    setCreateFeedback(false)\n  }\n  function showForm() {\n    setCreatedFeedback(false)\n    setCreateFeedback(true)\n    setShowHome(false)\n  }\n\n  const showAddFeedback = (\n    <div id=\"container\">\n      <h1>Trimitere feedback</h1>\n      <br />\n      <label htmlFor=\"id\"><b>COD Activitate</b></label>\n      <br />\n      <input type=\"text\" ref={cod} placeholder=\"Introduceti codul\" name=\"ID\" id=\"ID\" required=\"\"></input> <br />\n      <button type=\"submit\" class=\"custombtn\" onClick={() => {\n        getActivities(student)\n      }}>Inrolare activitate</button> <br />\n      <label htmlFor=\"descriere\"><b>Descriere Feedback</b></label> <br />\n      <input type=\"text\" ref={descriere} placeholder=\"Introduceti o descriere\" name=\"descriere\" id=\"descriere\" required=\"\"></input> <br />\n      <label htmlFor=\"emoji\"><b>Selecteaza tipul de emoji pe care dorești să-l oferi activității!</b></label>  <br />\n      <select ref={tip} name=\"wgtmsr\" id=\"selectImoji\">\n        <option value=\"EXCELENT\">Excelent 💓</option>\n        <option value=\"GOOD\">Good 😀</option>\n        <option value=\"AVERAGE\">Average 🙁</option>\n        <option value=\"POOR\">Poor 😣</option>\n      </select> <br />\n      <button type=\"submit\" class=\"custombtn\" onClick={() => {\n        postFeedback(student, activity)\n      }}>Trimitere feedback</button>\n    </div>\n  );\n\n\n  const studPage = (\n    <div id=\"container\">\n      <h1>Salut, bine ai revenit,  {student && student.firstName + ' ' + student.lastName}!</h1>\n      <h3>Dorești să te inrolezi intr-o activitate noua?</h3>\n      <button type=\"button\" class=\"custombtn\" onClick={showForm}>Inrolare activitate</button>\n    </div>\n  );\n\n  return (\n    <div >\n      {createFeedback ? showAddFeedback : studPage}\n      {showHome ? studPage : 'nne'}\n      {createdFeedback ? addedFeedback : 'none'}\n    </div>\n  );\n}\n\nexport default StudentPage;\n","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\components\\Feedback.js",["64"],"\nimport book from \"../media/book.jfif\";\nfunction Feedback(props) {\n    return (<div className=\"card col-xs-12 col-sm-4 col-lg-4\">\n      <img className=\"card-img-top\" src={book} alt=\"Card image cap\"></img>\n      <div className=\"card-body\">\n          <h5 className=\"card-title\">{props.feedback.description} - {props.feedback.type}</h5>\n      </div>\n  </div>\n    );\n  }\n  export default Feedback;\n  ","C:\\Users\\Mirel\\Desktop\\Technologii-Web-Acordare_Feedback_Continuu_Cursuri-main\\client\\src\\components\\Activity.js",["65"],"\nimport book from \"../media/onlineclass.svg\";\nfunction Activity(props) {\n    return (\n    <div \n  className=\"card col-xs-12 col-sm-4 col-lg-4\">\n      <img className=\"card-img-top\" src={book} alt=\"Card image cap\"></img>\n      <div className=\"card-body\">\n          <h5 className=\"card-title\">{props.activity.code} - {props.activity.description}</h5>\n      </div>\n  </div>\n    );\n  }\n  export default Activity;\n  ",{"ruleId":"66","severity":1,"message":"67","line":20,"column":38,"nodeType":"68","messageId":"69","endLine":20,"endColumn":40},{"ruleId":"70","severity":1,"message":"71","line":108,"column":15,"nodeType":"72","endLine":108,"endColumn":50},{"ruleId":"70","severity":1,"message":"71","line":120,"column":15,"nodeType":"72","endLine":120,"endColumn":49},{"ruleId":"73","severity":1,"message":"74","line":7,"column":9,"nodeType":"72","endLine":7,"endColumn":35},{"ruleId":"70","severity":1,"message":"75","line":8,"column":9,"nodeType":"72","endLine":8,"endColumn":34},{"ruleId":"70","severity":1,"message":"75","line":9,"column":9,"nodeType":"72","endLine":9,"endColumn":78},{"ruleId":"66","severity":1,"message":"67","line":84,"column":22,"nodeType":"68","messageId":"69","endLine":84,"endColumn":24},{"ruleId":"66","severity":1,"message":"67","line":116,"column":22,"nodeType":"68","messageId":"69","endLine":116,"endColumn":24},{"ruleId":"76","severity":1,"message":"77","line":173,"column":24,"nodeType":"78","messageId":"79","endLine":173,"endColumn":26},{"ruleId":"66","severity":1,"message":"67","line":175,"column":20,"nodeType":"68","messageId":"69","endLine":175,"endColumn":22},{"ruleId":"66","severity":1,"message":"67","line":192,"column":22,"nodeType":"68","messageId":"69","endLine":192,"endColumn":24},{"ruleId":"66","severity":1,"message":"67","line":194,"column":29,"nodeType":"68","messageId":"69","endLine":194,"endColumn":31},{"ruleId":"66","severity":1,"message":"67","line":196,"column":29,"nodeType":"68","messageId":"69","endLine":196,"endColumn":31},{"ruleId":"66","severity":1,"message":"67","line":198,"column":29,"nodeType":"68","messageId":"69","endLine":198,"endColumn":31},{"ruleId":"66","severity":1,"message":"67","line":326,"column":34,"nodeType":"68","messageId":"69","endLine":326,"endColumn":36},{"ruleId":"66","severity":1,"message":"67","line":327,"column":34,"nodeType":"68","messageId":"69","endLine":327,"endColumn":36},{"ruleId":"66","severity":1,"message":"67","line":328,"column":34,"nodeType":"68","messageId":"69","endLine":328,"endColumn":36},{"ruleId":"66","severity":1,"message":"67","line":329,"column":34,"nodeType":"68","messageId":"69","endLine":329,"endColumn":36},{"ruleId":"76","severity":1,"message":"80","line":30,"column":20,"nodeType":"78","messageId":"81","endLine":30,"endColumn":22},{"ruleId":"66","severity":1,"message":"67","line":31,"column":22,"nodeType":"68","messageId":"69","endLine":31,"endColumn":24},{"ruleId":"76","severity":1,"message":"77","line":51,"column":13,"nodeType":"82","messageId":"83","endLine":51,"endColumn":20},{"ruleId":"76","severity":1,"message":"77","line":65,"column":13,"nodeType":"82","messageId":"83","endLine":65,"endColumn":20},{"ruleId":"73","severity":1,"message":"74","line":134,"column":11,"nodeType":"72","endLine":134,"endColumn":255},{"ruleId":"84","severity":1,"message":"85","line":5,"column":7,"nodeType":"72","endLine":5,"endColumn":69},{"ruleId":"84","severity":1,"message":"85","line":7,"column":7,"nodeType":"72","endLine":7,"endColumn":69},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","ReturnStatement","expectedReturnValue","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop."]